#!/bin/bash

# process file directories
RUND=/run
ALTD=/var/run

DHCPD=`which dhcpcd`


function help() {
	echo "A WiFi Connection Tool"
	echo -e "\nUsage: nwifictl -e|-essid <essid> -i|-iface <iface> [options]"
	echo "[options]:"
	echo -e "\t-p|-psk [PSK]\t\tSpecify the password"
	echo -e "\t-s|-spoof [ADDR]\tSpoof interface MAC address"
	echo -e "\t-c|-config [CONFIG]\tSpecify a custom wpa_supplicant config"
	echo -e "\t-help\t\t\tPrints this help text"

	exit 0
}

function connect() {
	# stop NetworkManager
	service NetworkManager stop	

	# clean up old leases
	killall dhcpcd && killall wpa_supplicant 2>/dev/null
	rm $RUND/dhcpcd*.pid 2>/dev/null
	rm $RUND/wpa_supplicant/$IFACE 2>/dev/null

	if [ -z "$2" ]; then
	# if it's an open network

		# simple connect with iwconfig
		ifconfig $IFACE down
		iwconfig $IFACE essid $1
		ifconfig $IFACE up
	else
	# if it's a password-protected network

		# add network to the configuration file and initialize
		wpa_passphrase $1 $2 >> $3
		wpa_supplicant -B -Dnl80211 -i$IFACE -c$3 2>/dev/null

		# get an IP address
		$DHCPD $IFACE 2>/dev/null
	fi

	# wait for it to fully connect
	sleep 10

	# test the connection
	ping -c2 -q 8.8.8.8 &>/dev/null

	if [ $? -eq 0 ]; then
		echo "[+] Successfully connected to $1"
	else
		echo "[!] Failed to connect to $1"
		exit 2
	fi
}

# begin command-line parsing 
while [ "$1" != "" ]; do
	param=`echo $1|awk -F= '{print $1}'`
	value=`echo $1|awk -F= '{print $2}'`
	
	# help text
	[ $1 == "-help" ] && help

	case $param in
		-e|-essid)
			SSID=$value
		    	;;
		-p|-psk) 
			PASS=$value
		    	;;
		-i|-iface) 
			IFACE=$value
		    	;;
		-s|-spoof)
			MAC=$value
			;;
		-c|-config)
			CONFIG=$value
			;;
		*) 
			echo "[!] $param is an incorrect option. See -help for more info."
		   	exit 1
		   	;;
	esac
	shift
done

# require -i option
if [ -z "$IFACE" ]; then
	echo "[!] You must specify an interface to use."
	exit 1
fi

# require -e option
if [ -z "$SSID" ]; then
	echo "[!] You must specify a network to connect to."
	exit 1
fi

# set default config if none specified
[ -z "$CONFIG" ] && CONFIG="/etc/wpa_supplicant.conf"	

# spoof mac if -s option is specified
if [ -n "$MAC" ]; then
	ifconfig $IFACE down
	ifconfig $IFACE hw ether $MAC
	ifconfig $IFACE up
fi

# do stuff depending on auth or no auth
echo "[*] Connecting to $SSID, this may take a few moments... "

if [ -n "$PASS" ]; then
	# if there is a password specified
	connect $SSID $PASS $CONFIG
else
	# if it's an open network
	connect $SSID "" $CONFIG
fi

